#!/usr/bin/env python

import os
import sys
import subprocess
import shutil
from fabricate import *

MAXCOMPILERDIR = '/network-raid/opt/maxcompiler-2015.1-rc1/' # os.environ['MAXCOMPILERDIR']
CLASSPATH = os.environ['CLASSPATH']

MAXCOMPILER = 'maxjc'
MAXDEBUG = 'source,lines,vars'
MAXSOURCE = '1.6'
MAXTARGET = '1.6'
MAXCLASSPATH = ['%s/lib/MaxCompiler.jar' % MAXCOMPILERDIR]

MAXDESTDIR = 'bin'
MAXSRCDIR = 'HTTP-Web-Server'

# build directory - .max file location
result=os.environ.get('MAXCOMPILER_BUILD_CONF')

JAVARTENV = '/network-raid/opt/jdk1.6.0_02/jre/bin/java'
JAVAMAXHEAPSIZE = 'mx12288m' #-Xmx<size> set maximum Java heap size
HTTPSERVERCLASSPATH = ['./bin']  + [CLASSPATH]
DFEMODEL='ISCA' 
MAXFILENAME='httpserver'
HTTPSERVERSTARTUPCLASS = 'httpServer.HttpServerManager'

MAXBUILDDIRECTORY_DFE="/tmp/maxbuild/maxdc_builds/DFE/"
MAXBUILDDIRECTORY_SIM="/tmp/maxbuild/maxdc_builds/DFE_SIM/"

pathInit='../CPU_SRC/HTTP-Web-Server/'

message = "Valid argument format: make < dfe | sim >"
if __name__ == '__main__':
	if len(sys.argv) == 2:
		ARG_VAR = sys.argv[1]
		if (ARG_VAR != 'dfe') and (ARG_VAR != 'sim'):
			sys.exit(message)
		if ARG_VAR == 'dfe':
			TARGET = 'DFE'
			os.environ["MAXCOMPILER_BUILD_CONF"] = "build.copy_results_to = " + MAXBUILDDIRECTORY_DFE + ";"
		else:
			TARGET = 'DFE_SIM'
			os.environ["MAXCOMPILER_BUILD_CONF"] = "build.copy_results_to = " + MAXBUILDDIRECTORY_SIM + ";"
	else:
		sys.exit(message)

def sim():
	clean()
	compile_java()
	execute_java_maxJavaRun()
	init_code()
	http_server_sim()

def dfe():
	clean()
	var = raw_input("Do you want to build .max file? (y/N): ")
	if var=='y':
		compile_java()
		execute_java_maxJavaRun()
	init_code()
	http_server_dfe()

def copy_files(src, dst):
	print "Copying .max and .h files..."
	shutil.copy2(src + MAXFILENAME + '.max', dst)
	shutil.copy2(src + MAXFILENAME + '.h', dst)
	print "Done"

# compile java
# command
def compile_java():
    print "\n*** Compile Java *** \n"
    run(MAXCOMPILER, '-nowarn', '-g:%s' % MAXDEBUG, '-source', '%s' % MAXSOURCE, 
        '-target', '%s' % MAXTARGET, '-classpath', '%s' % ':'.join(MAXCLASSPATH), 
        '-d', '%s' % MAXDESTDIR, MAXSRCDIR)

def execute_java_maxJavaRun():
    print "\n*** Execute Java *** \n"
    Temp = ' '.join(['CLASSPATH=%s' % ':'.join(HTTPSERVERCLASSPATH), 'maxJavaRun', HTTPSERVERSTARTUPCLASS, 'DFEModel=%s' % DFEMODEL, 'maxFileName=%s' % MAXFILENAME, 'target=%s' % TARGET])
    subprocess.check_call(Temp, shell=True)

# initCode
def init_code():
	NAME='initCode'
	sources = [NAME]

	# We define our compiler flags
	flags = ['-g']
	
	cdir=os.getcwd()
	print os.getcwd()

	def build_init():
		os.chdir(pathInit)
		compile_init()
		link_init()
		execute_program_init()
		os.chdir(cdir)

	def compile_init():
		for source in sources:
		    run('gcc', flags, '-c', source + '.c')

	def link_init():
		objects = [s+'.o' for s in sources]
		run('gcc', '-lm', objects,'-o', NAME)

	def execute_program_init():    
		run('./%s' % NAME)

# end initCode

# make_httpServerCPUcodeSIM

def http_server_sim():
	cdir=os.getcwd()
	os.chdir(pathInit)

	copy_files(MAXBUILDDIRECTORY_SIM, '.')

	NAME="httpServerCPUcode" # name of the CPU code

	IP1="169.254.10.4"
	TAP1_IP="169.254.10.48"
	TAP1_NETMASK="255.255.255.0"
	INIT_TAP1="QSFP_BOT_10G_PORT1:" + TAP1_IP + ":" + TAP1_NETMASK

	USER=os.environ['USER']
	SIM_NAME=USER + "Sim"

	MAXFILE="httpserver.max"

	# We pick off some environment vars
	MAXCOMPILERDIR = os.environ['MAXCOMPILERDIR']
	#MAXMPTDIR = os.environ['MAXMPTDIR']
	MAXOSDIR = os.environ['MAXELEROSDIR']
	#JAVA_HOME = os.environ['JAVA_HOME']

	USE_SLIC = True
	SLICCOMPILE = MAXCOMPILERDIR + '/bin/sliccompile'

	try:
	    MAXCOMPILERDIR    
	except NameError:
	    print "Error: You must specify the path to the directory containing MaxCompiler in the variable MAXCOMPILERDIR.\n"    
	    sys.exit(1)

	#include $(MAXCOMPILERDIR)/lib/Makefile.include

	#DFE_MODEL= run('perl','-n -e', 'print $1 if /ENGINE_PARAMETERS\(DFEModel, DFEMODEL, (.*?)\)/', MAXFILE)
	DFE_MODEL=subprocess.Popen(['perl', '-n', '-e', 'print $1 if /ENGINE_PARAMETERS\(DFEModel, DFEMODEL, (.*?)\)/', MAXFILE], stdout=subprocess.PIPE).communicate()[0] #.communicate == get output
	#DESIGN_NAME=run('grep', 'MAXFILE_BUILD_NAME', MAXFILE) '| awk -F \"','{print $2;}')

	arg = 'MAXFILE_BUILD_NAME ' + MAXFILE + ' | awk -F \\" \'{print $2;}\''
	print "arg: " + arg
			#DESIGN_NAME=subprocess.Popen(['grep', arg], stdout=subprocess.PIPE)
	DESIGN_NAME="httpServer"
	#grep MAXFILE_BUILD_NAME httpServer.max | awk -F \" '{print $2;}'

	#for e in DFE_MODEL:
	#	print e
	print "DFE_MODEL: %s " % DFE_MODEL
	#for e in DESIGN_NAME:
	#	print e
	print "DESIGN_NAME: " + DESIGN_NAME

	sources = ["%s.c" % NAME]

	os.environ["MAXELEROSDIR"] = os.environ['MAXCOMPILERDIR'] + '/lib/maxeleros-sim'
	os.environ["LD_PRELOAD"] = os.environ["MAXELEROSDIR"] + '/lib/libmaxeleros.so:' #+ os.environ["LD_PRELOAD"]
	os.environ["SLIC_CONF"] = os.getenv("SLIC_CONF",'') + ';use_simulation=' + os.environ["USER"] + 'Sim' 

	def get_maxcompiler_inc():
	    """Return the includes to be used in the compilation."""
	    if USE_SLIC:
		return ['-I.', '-I%s/include' % MAXOSDIR, '-I%s/include/slic' % MAXCOMPILERDIR]
	    return ['-I.', '-I%s/include' % MAXOSDIR, '-I%s/include' % MAXCOMPILERDIR]

	def get_maxcompiler_libs():
	    """Return the libraries to be used in linking."""
	    if USE_SLIC:
		return ['-L%s/lib' % MAXCOMPILERDIR, '-L%s/lib' % MAXOSDIR, '-lslic', '-lmaxeleros', '-lm', '-lpthread']
	    return ['-L%s/lib' % MAXCOMPILERDIR, '-L%s/lib' % MAXOSDIR, '-lmaxcompilerrt', '-lmaxeleros', '-lm', '-lpthread']

	def get_ld_libs():
	    """Returns the libraries to be used for linking."""
	    #return ['-L%s/lib' % MAXMPTDIR] + MAXMPTLIBS + SYSTEMLIBS + get_maxcompiler_libs()
	    return get_maxcompiler_libs()

	# We define our compiler flags
	flags = ['-std=gnu99','-Wall', '-Werror','-ggdb', '-rdynamic', '-DDESIGN_NAME=%s' % DESIGN_NAME, get_maxcompiler_inc()]

	def build():
		clean()
		compile()
		link()
		restart_sim()
		execute_CPUprogram()
		os.chdir(cdir)
		
	def compile():
	    print "\n*** Compiling *** \n"
	    for source in sources:
		run('gcc', flags, '-c', source, '-o', source.replace('.c', '.o'))

	def link():
	    print "\n*** Linking *** \n"
	    objects = [s.replace('.c','.o') for s in sources]
	    run(SLICCOMPILE, MAXFILE, MAXFILE.replace('.max','.o'))
	    run('gcc', objects, MAXFILE.replace('.max','.o'), get_ld_libs(), '-o', NAME)

	def execute_CPUprogram():
	    run('./%s' % NAME, '%s' % IP1,  '%s' % TAP1_NETMASK)

	def restart_sim():
	    subprocess.check_call(['maxcompilersim', '-n', SIM_NAME, '-c', DFE_MODEL, '-e', INIT_TAP1, 'restart'])

	def clean():
	    #autoclean()
	    run('rm','-f', '*.o', '*.pcap', '*.dot', '*.png')

	build()

# end make_httpServerCPUcodeSIM

# make_httpServerCPUcodeDFE

def http_server_dfe():
	cdir=os.getcwd()
	os.chdir(pathInit)

	try:
		copy_files(MAXBUILDDIRECTORY_DFE, '.')
	except IOError as e:
	 	sys.exit("Error, file does not exist. You need to build .max file for DFE.")

	NAME="httpServerCPUcode" # name of the CPU code

	IP="172.17.0.9"
	NETMASK="255.255.255.224"

	MAXFILE="httpserver.max"

	# We pick off some environment vars
	MAXCOMPILERDIR = os.environ['MAXCOMPILERDIR']
	#MAXMPTDIR = os.environ['MAXMPTDIR']
	MAXOSDIR = os.environ['MAXELEROSDIR']
	#JAVA_HOME = os.environ['JAVA_HOME']

	USE_SLIC = True
	SLICCOMPILE = MAXCOMPILERDIR + '/bin/sliccompile'

	try:
		MAXCOMPILERDIR    
	except NameError:
		print "Error: You must specify the path to the directory containing MaxCompiler in the variable MAXCOMPILERDIR.\n"    
		sys.exit(1)

	#include $(MAXCOMPILERDIR)/lib/Makefile.include

	#DFE_MODEL= run('perl','-n -e', 'print $1 if /ENGINE_PARAMETERS\(DFEModel, DFEMODEL, (.*?)\)/', MAXFILE)
	DFE_MODEL=subprocess.Popen(['perl', '-n', '-e', 'print $1 if /ENGINE_PARAMETERS\(DFEModel, DFEMODEL, (.*?)\)/', MAXFILE], stdout=subprocess.PIPE).communicate()[0] #.communicate == get output
	#DESIGN_NAME=run('grep', 'MAXFILE_BUILD_NAME', MAXFILE) '| awk -F \"','{print $2;}')

	arg = 'MAXFILE_BUILD_NAME ' + MAXFILE + ' | awk -F \\" \'{print $2;}\''
	print "arg: " + arg
			#DESIGN_NAME=subprocess.Popen(['grep', arg], stdout=subprocess.PIPE)
	DESIGN_NAME="httpServer"
	#grep MAXFILE_BUILD_NAME httpServer.max | awk -F \" '{print $2;}'


	#for e in DFE_MODEL:
	#	print e
	print "DFE_MODEL: %s " % DFE_MODEL
	#for e in DESIGN_NAME:
	#	print e
	print "DESIGN_NAME: " + DESIGN_NAME

	#sys.exit(1)

	#grep MAXFILE_BUILD_NAME httpServer.max | awk -F \" '{print $2;}'

	#DFE_MODEL := $(shell perl -ne 'print $$1 if /ENGINE_PARAMETERS\(DFEModel, DFEMODEL, (.*?)\)/' $(MAXFILE))
	#DESIGN_NAME := $(shell grep MAXFILE_BUILD_NAME $(MAXFILE) | awk -F \" '{print $$2}')


	#perl -n -e 'print $1 if /ENGINE_PARAMETERS\(DFEModelo DFEMODEL, (.*?)\)/' "httpServer.max"

	sources = ["%s.c" % NAME]

	def get_maxcompiler_inc():
		"""Return the includes to be used in the compilation."""
		if USE_SLIC:
		    return ['-I.', '-I%s/include' % MAXOSDIR, '-I%s/include/slic' % MAXCOMPILERDIR]
		return ['-I.', '-I%s/include' % MAXOSDIR, '-I%s/include' % MAXCOMPILERDIR]

	def get_maxcompiler_libs():
		"""Return the libraries to be used in linking."""
		if USE_SLIC:
		    return ['-L%s/lib' % MAXCOMPILERDIR, '-L%s/lib' % MAXOSDIR, '-lslic', '-lmaxeleros', '-lm', '-lpthread']
		return ['-L%s/lib' % MAXCOMPILERDIR, '-L%s/lib' % MAXOSDIR, '-lmaxcompilerrt', '-lmaxeleros', '-lm', '-lpthread']

	def get_ld_libs():
		"""Returns the libraries to be used for linking."""
		#return ['-L%s/lib' % MAXMPTDIR] + MAXMPTLIBS + SYSTEMLIBS + get_maxcompiler_libs()
		return get_maxcompiler_libs()

	# We define our compiler flags
	flags = ['-std=gnu99','-Wall', '-Werror','-ggdb', '-rdynamic', '-DDESIGN_NAME=%s' % DESIGN_NAME, get_maxcompiler_inc()]

	def build():
		clean()
		compile()
		link()
		execute_CPUprogram()

	def compile():
		print "\n*** Compiling *** \n"
		for source in sources:
		    run('gcc', flags, '-c', source, '-o', source.replace('.c', '.o'))

	def link():
		print "\n*** Linking *** \n"
		objects = [s.replace('.c','.o') for s in sources]
		run(SLICCOMPILE, MAXFILE, MAXFILE.replace('.max','.o'))
		run('gcc', objects, MAXFILE.replace('.max','.o'), get_ld_libs(), '-o', NAME)

	def execute_CPUprogram():
		run('./%s' % NAME, '%s' % IP,  '%s' % NETMASK)

	def clean():
		#autoclean()
		run('rm','-f', '*.o', '*.pcap', '*.dot', '*.png')

	build()

# end make_httpServerCPUcodeDFE

def clean():
    autoclean()

main()
