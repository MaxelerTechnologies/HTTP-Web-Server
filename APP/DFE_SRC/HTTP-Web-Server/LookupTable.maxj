package httpServer;

import com.maxeler.maxcompiler.v2.managers.DFEManager;
import com.maxeler.maxcompiler.v2.statemachine.DFEsmAssignableValue;
import com.maxeler.maxcompiler.v2.statemachine.DFEsmSinglePortMappedROM;
import com.maxeler.maxcompiler.v2.statemachine.DFEsmStateValue;
import com.maxeler.maxcompiler.v2.statemachine.Latency;
import com.maxeler.maxcompiler.v2.statemachine.manager.DFEsmPushInput;
import com.maxeler.maxcompiler.v2.statemachine.manager.DFEsmPushOutput;
import com.maxeler.maxcompiler.v2.statemachine.manager.ManagerStateMachine;


public class LookupTable extends ManagerStateMachine {

	public static final String dataIn1 = "crc16";
	public static final String dataIn2 = "blankPageInput";
	public static final String dataOut1 = "crcIndexOutput";
	public static final String dataOut2 = "blankPageOutput";

	private final DFEsmSinglePortMappedROM romCrcIndex1;
	private final DFEsmSinglePortMappedROM romCrcIndex2;

	private final DFEsmStateValue sCrcIndexDataOutValid = state.value(dfeBool(), false);
	private final DFEsmStateValue sWhatCrcIndexToUse = state.value(dfeUInt(1),	0);
	private final DFEsmPushInput crc16 = io.pushInput(dataIn1, dfeUInt(16), 1);
	private final DFEsmPushOutput crcIndexOutput = io.pushOutput(dataOut1, dfeUInt(64), 1);

	private final DFEsmPushInput crcBlankPageFlagInput = io.pushInput(dataIn2, dfeBool(), 1);
	private final DFEsmPushOutput crcBlankPageFlagOutput = io.pushOutput(dataOut2, dfeBool(), 1);

	private final DFEsmStateValue counter = state.value(dfeUInt(20), 0);

	public LookupTable(DFEManager owner) {
		super(owner);

		// CRC Index Tables

		romCrcIndex1 = mem.romMapped("romCrcIndex1", dfeUInt(64), 32768,	Latency.ONE_CYCLE);
		romCrcIndex2 = mem.romMapped("romCrcIndex2", dfeUInt(64), 32768,	Latency.ONE_CYCLE);
	}

	@Override
	protected void nextState() {

		counter.next<==counter+1;

		IF(crcBlankPageFlagInput.valid)
		{
			// ./files/HTTPError404NotFound.html - size(bytes): 304
			// Checksum value: 0x51a7
			DFEsmAssignableValue crcIndexBlankPage = assignable.value(dfeUInt(16));
			crcIndexBlankPage <== 0x51a7;

			romCrcIndex1.address <== crcIndexBlankPage.slice(0, 15);
			romCrcIndex2.address <== crcIndexBlankPage.slice(0, 15);
			sWhatCrcIndexToUse.next <== crcIndexBlankPage[15];

			debug.simPrintf("LookupTable: crcBlankPageFlagInput=%d, crcIndexBlankPage(0, 15)=%u, sWhatCrcIndexToUse=%u\n", crcBlankPageFlagInput.valid, crcIndexBlankPage.slice(0, 15),crcIndexBlankPage[15]);

			sCrcIndexDataOutValid.next<==true;
		}

		IF(crc16.valid)
		{
			romCrcIndex1.address <== crc16.slice(0, 15);
			romCrcIndex2.address <== crc16.slice(0, 15);
			sWhatCrcIndexToUse.next <== crc16[15];

			debug.simPrintf("LookupTable: crc16.valid=%d, crc16(0, 15)=%u, sWhatCrcIndexToUse=%u\n", crc16.valid, crc16.slice(0, 15),crc16[15]);

			sCrcIndexDataOutValid.next<==true;
		}

		IF(sCrcIndexDataOutValid===true)
		{
			DFEsmAssignableValue crcIndexData = assignable.value(dfeUInt(64));
			crcIndexData <== 0;

			IF(sWhatCrcIndexToUse===0)
			{
				crcIndexData <== romCrcIndex1.dataOut;
			}
			ELSE
			{
				crcIndexData <== romCrcIndex2.dataOut;
			}

			debug.simPrintf("LookupTable: Value romCrcIndex.dataOut=%x, romCrcIndex.dataOut=%x, sUseCrcIndex=%x, current=%u\n", romCrcIndex1.dataOut, romCrcIndex2.dataOut, sWhatCrcIndexToUse, counter);

			DFEsmAssignableValue startAddressBurst=assignable.value(dfeUInt(19)); // startAddressBurst in LMem
			DFEsmAssignableValue fileLengthBursts=assignable.value(dfeUInt(19)); // length of a file as number of Bursts
			DFEsmAssignableValue fileLengthBytes=assignable.value(dfeUInt(26)); // 2^26 / 1024 /1024 = 64 MB

			fileLengthBytes<==crcIndexData.slice(0, 26);
			fileLengthBursts<==crcIndexData.slice(26, 19);
			startAddressBurst<==crcIndexData.slice(45, 19);

			debug.simPrintf("LookupTable: startAddressBurst=%u, fileLengthBursts=%u, fileLengthBytes=%u\n",startAddressBurst,fileLengthBursts,fileLengthBytes);

			sCrcIndexDataOutValid.next<==false;
		}
	}

	@Override
	protected void outputFunction() {

			IF(crc16.valid)
			{
				debug.simPrintf("LookupTable: tick=%u, parallelCRC: crc16=0x%x\n", counter, crc16);
			}

			DFEsmAssignableValue crcIndexData = assignable.value(dfeUInt(64));
			crcIndexData <== 0;

			IF(sWhatCrcIndexToUse===0)
			{
				crcIndexData <== romCrcIndex1.dataOut;
			}
			ELSE
			{
				crcIndexData <== romCrcIndex2.dataOut;
			}

			crc16.stall <== crcIndexOutput.stall;

			crcIndexOutput.valid <== false;
			crcIndexOutput <==0;

			crcBlankPageFlagOutput.valid <==false;
			crcBlankPageFlagOutput <== 0;
			crcBlankPageFlagInput.stall <== crcIndexOutput.stall;

			IF(sCrcIndexDataOutValid===true)
			{

				IF(crcIndexData===0)
				{
					//send request for 'blank page'
					crcBlankPageFlagOutput.valid <== true;
					crcBlankPageFlagOutput <== 1;
				}
				ELSE  {
					crcIndexOutput.valid <== true;
					crcIndexOutput <== crcIndexData;
				}
			}
	}
}