package httpServer;

import java.util.ArrayList;

import com.maxeler.maxcompiler.v2.managers.DFEManager;
import com.maxeler.maxcompiler.v2.statemachine.DFEsmStateValue;
import com.maxeler.maxcompiler.v2.statemachine.manager.DFEsmPullOutput;
import com.maxeler.maxcompiler.v2.statemachine.manager.DFEsmPushInput;
import com.maxeler.maxcompiler.v2.statemachine.manager.ManagerStateMachine;
import com.maxeler.maxcompiler.v2.statemachine.stdlib.Buffer.BufferSpec;
import com.maxeler.maxcompiler.v2.statemachine.stdlib.Buffer.DFEsmFifoConfig;
import com.maxeler.maxcompiler.v2.statemachine.stdlib.buffer.DFEsmFifo;
import com.maxeler.maxcompiler.v2.statemachine.types.DFEsmValueType;

public class SocketFIFO extends ManagerStateMachine {

	int Nsockets = 1;
	
	private final ArrayList<DFEsmPushInput> inputPorts = new ArrayList<DFEsmPushInput>(Nsockets);
	private final ArrayList<DFEsmPullOutput> outputPorts = new ArrayList<DFEsmPullOutput>(Nsockets);

	
	private final DFEsmFifo[] m_fifo = new DFEsmFifo[Nsockets];
	
	private final DFEsmStateValue counter = state.value(dfeUInt(20), 0);

	public SocketFIFO(DFEManager owner) {
		super(owner);

		int width = 8;
		for (int i = 0; i < Nsockets; i++) {
			String inputName = "socketNumberInput" + String.valueOf(i);
			inputPorts.add(io.pushInput(inputName, dfeUInt(width), 1));

			String outputName = "socketNumberOutput" + String.valueOf(i);
			outputPorts.add(io.pullOutput(outputName, dfeUInt(width)));
		}

		final DFEsmValueType type = dfeUInt(width);

		// m_input = io.pushInput("input", type, inLatency);
		// m_output = io.pullOutput("output", type, outLatency);

		// computer says FIFO depth must be a power of two
		// we add one to the number to have a minimum slack of 2
		// items before stalling input
		// It also says depths of less than 8 are bad... I found
		// Xilinx's doc for FIFOs and it says min depth is 16
		// http://www.xilinx.com/support/documentation/ip_documentation/fifo_generator_ug175.pdf
		final int fifoDepth = 256; // Math.max(16, 1 <<
									// (MathUtils.bitsToAddress(Math.max(inLatency,
									// outLatency)+2)));

		final int progEmptyLatency = 5; // Math.max(outLatency, 7);
		// m_almostEmptyStartCount = progEmptyLatency - outLatency;

		final DFEsmFifoConfig fifoConfig = new DFEsmFifoConfig().setBufferSpec(BufferSpec.UseLUTRam)
								.setProgrammableFull(fifoDepth)
								.setProgrammableEmpty(progEmptyLatency)
								.setHasValidFlag()
								.setHasDataCount();

		for (int i = 0; i < Nsockets; i++) {
			m_fifo[i] = buffer.fifo(type, fifoDepth, fifoConfig);
		}

	

	}

	@Override
	protected void nextState() {

		counter.next<==counter+1;



		for(int i=0;i<Nsockets;i++)
		{
			
			{
			m_fifo[i].input.writeEnable <== inputPorts.get(i).valid; //true; //inputPorts.get(i).valid
			}
			m_fifo[i].input.dataIn <== inputPorts.get(i);

			// output
			m_fifo[i].output.readEnable <== outputPorts.get(i).read; //outputPorts.get(i).read;
			IF(inputPorts.get(i).valid)
			{
				debug.simPrintf("socketFIFO: counter=%u, inputPorts.get(i)=%x, m_fifo[%d].output.dataOut=%u\n",counter, inputPorts.get(i), i, m_fifo[i].output.dataOut); //m_fifo[i].output.dataOut
			}
		}

	}

	@Override
	protected void outputFunction() {

		for(int i=0;i<Nsockets;i++)
		{
			
			inputPorts.get(i).stall <== m_fifo[i].input.progFull;

			outputPorts.get(i).empty <== m_fifo[i].output.empty;
			outputPorts.get(i) <== m_fifo[i].output.dataOut;

			IF(outputPorts.get(i).read)
			{
				debug.simPrintf("socketFIFO: counter=%u, SETOVAN outputPorts.get(i).read=%u\n", counter, outputPorts.get(i).read);
			}

			}

		

	}
}
