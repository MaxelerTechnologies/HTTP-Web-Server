package httpServer;

import com.maxeler.maxblox.statemachine.TieOffNode;
import com.maxeler.maxblox.statemachine.TieOffNode.IODirection;
import com.maxeler.maxblox.statemachine.TieOffNode.IOPattern;
import com.maxeler.maxblox.statemachine.TieOffNode.IOStreamMode;
import com.maxeler.maxcompiler.v2.build.EngineParameters;
import com.maxeler.maxcompiler.v2.kernelcompiler.KernelConfiguration;
import com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFETypeFactory;
import com.maxeler.maxcompiler.v2.managers.BuildConfig;
import com.maxeler.maxcompiler.v2.managers.custom.DFELink;
import com.maxeler.maxcompiler.v2.managers.custom.blocks.KernelBlock;
import com.maxeler.maxcompiler.v2.managers.custom.blocks.StateMachineBlock;
import com.maxeler.maxcompiler.v2.managers.custom.stdlib.DebugLevel;
import com.maxeler.maxcompiler.v2.managers.custom.stdlib.Max4QMem;
import com.maxeler.maxcompiler.v2.managers.custom.stdlib.MemoryControlGroup;
import com.maxeler.maxeleros.ip.SlicePad.Padder;
import com.maxeler.maxeleros.managerblocks.Slicer;
import com.maxeler.networking.statemachines.TCPRxWindowMemory;
import com.maxeler.networking.statemachines.TCPTxWindowMemory;
import com.maxeler.networking.statemachines.superfifo.SuperFIFO;
import com.maxeler.networking.statemachines.superfifo.SuperFIFO.FifoIO;
import com.maxeler.networking.types.TCPManyConnectionsTypes;
import com.maxeler.networking.v1.managers.NetworkManager;
import com.maxeler.networking.v1.managers.blocks.MaxTCPVersion;
import com.maxeler.networking.v1.managers.netlib.Max4NetworkConnection;
import com.maxeler.networking.v1.managers.netlib.NetworkConnection;
import com.maxeler.networking.v1.managers.netlib.TCPStreamManyConnections;
import com.maxeler.utils.MemoryManager;

public class HttpServerManager extends NetworkManager {

	private static final String KERNEL_NAME_write = "KernelLMem_Write_CommandAndDataStream";
	private static final String KERNEL_NAME_read = "KernelLMem_Read_CommandAndDataStream";
	private static final int Nsockets = 16;
	private final int width;

	public static final int getNsockets() {
		return Nsockets;
	}

	private final boolean useLMemWindowMemory = false;
	private final boolean hwLoopBack = false;

	public HttpServerManager(EngineParameters configuration) {
		super(configuration);

		debug.setDebugLevel(new DebugLevel(){{setHasStreamStatus(true);}});

		TcpNumConnectionsRequired numConnections = TcpNumConnectionsRequired.Max64Connections;

		NetworkConnection conn = Max4NetworkConnection.QSFP_BOT_10G_PORT1;
		MaxTCPVersion tcpVersion = MaxTCPVersion.fromNumConnections(true, numConnections);

	
		config.setDefaultStreamClockFrequency(50);
	
		boolean dfeBuild = configuration.getTarget() == EngineParameters.Target.DFE;
		MemoryManager memoryMgr = new MemoryManager(this);

		//64 connections
		tcpVersion = MaxTCPVersion.TCP_64C_V2;
		numConnections = TcpNumConnectionsRequired.Max64Connections;


		TCPStreamManyConnections tcpStream = addTCPStreamManyConnections("tcp_ISCA_QSFP_BOT_10G_PORT1", conn, numConnections);
		width = tcpStream.getTypes().getRxDataRespType().getTotalBits();

		addMaxFileConstant("maxNumberOfSockets", Nsockets);

		if (dfeBuild) {
			if (useLMemWindowMemory) {
				TCPRxWindowMemory.connectToLMem(this, conn, tcpVersion, memoryMgr);
				TCPTxWindowMemory.connectToLMem(this, conn, tcpVersion, memoryMgr);
			} else {
				TCPRxWindowMemory.connectToQMem(this, conn, tcpVersion, Max4QMem.QMEM2);
				TCPTxWindowMemory.connectToQMem(this, conn, tcpVersion, Max4QMem.QMEM1);
			}
		} else {
			network_config.setTCPReceiveWindowSize(conn, 64);
			network_config.setTCPTransmitWindowSize(conn, 64);
		}

		TCPManyConnectionsTypes tcpStreamTypes = tcpStream.getTypes();

		KernelBlock rxPop = addKernel(new KernelRxPop(makeKernelParameters("rxPopKernel"), tcpStreamTypes));

		boolean hasRxEventSuperFifo = false; //
		if (hasRxEventSuperFifo) {
			FifoIO superFifo = SuperFIFO.create(this, "superfifo",
				DFETypeFactory.dfeUInt(48),
				numConnections.getNumConnections() * network_config.getTCPReceiveWindowSize(conn),
				memoryMgr);
			superFifo.write <== Padder.padSource(this,
					tcpStream.getReceiveEventStream(), 48,
					tcpStream.getTypes().getEventType().getTotalBits(),
					true, 5, -1);
			Slicer.sliceConnect(this, superFifo.read, rxPop.getInput(KernelRxPop.IN_EVENT));
		} else {
			rxPop.getInput(KernelRxPop.IN_EVENT) <== tcpStream.getReceiveEventStream();
		}

		tcpStream.getReceiveRequestStream() <== rxPop.getOutput(KernelRxPop.OUT_REQUEST);

		StallSM stallSM = new StallSM(this, tcpStream.getTypes().getRxDataRespType().getTotalBits());
		System.out.println("ADDED: width=tcpStream.getTypes().getRxDataRespType().getTotalBits()=" + tcpStream.getTypes().getRxDataRespType().getTotalBits());
		StateMachineBlock stall = addStateMachine("stall", stallSM);
		stall.getInput("src") <== tcpStream.getReceiveDataStream();

		rxPop.getInput(KernelRxPop.IN_FIFO_FULL) <== stall.getOutput("fifoFull");
		addStreamToCPU("rxPopDebug") <== rxPop.getOutput(KernelRxPop.OUT_DEBUG);
		

		TieOffNode connStateEvTieOffSM = new TieOffNode(this);
		connStateEvTieOffSM.addIO(
                        "connStateEvTieOffIn",
                        tcpStreamTypes.getConnStateEventType().getTotalBits(),
                        IODirection.IN,
                        IOStreamMode.PUSH,
                        IOPattern.ADVANCE);
        StateMachineBlock connStateEvTieOff = addStateMachine("connStateEvTieOff", connStateEvTieOffSM);
        connStateEvTieOff.getInput("connStateEvTieOffIn") <== tcpStream.getConnStateEventStream();

       	//-----------------------------------------------------------------------------------------------------------

		StateMachineBlock wire = addStateMachine("cmdWire", new SimpleWire(this, 64));
		getManagerConfiguration().dram.setEnableFlagCommands(true);

		MemoryControlGroup ctrlGroup = addMemoryControlGroup("ctrlGroup", wire.getOutput(SimpleWire.OUTPUT));

		DFELink readMemStream = addStreamFromOnCardMemory("readMemStream", ctrlGroup);
	    ctrlGroup.finalise();


	    KernelConfiguration myKernelConfig = new KernelConfiguration(getCurrentKernelConfig());

		String smName = "httpServerStateMachine";
		StateMachineBlock stateMachine = addStateMachine(smName, new HttpServerStateMachine(this));
		stateMachine.getInput("tcp_to_sm") <== stall.getOutput("dst");//Scheduler.getOutput("schedulerDataOutput");;

		KernelBlock parallelCRC = addKernel(new ParallelCRC(makeKernelParameters("parallelCRC")));
		parallelCRC.getInput(ParallelCRC.dataIn) <== stateMachine.getOutput("checksumOutput1");

		KernelBlock kWrite = addKernel(new KernelLMem_Write_CommandAndDataStream(makeKernelParameters(KERNEL_NAME_write)));

		DFELink toCpu = addStreamToCPU("toCpu");
		DFELink fromCpu = addStreamFromCPU("fromCpu");

		DFELink toLmem = addStreamToOnCardMemory("toLmem",kWrite.getOutput("OcmdStreamWrite"));

		kWrite.getInput("inA")<==fromCpu;
		toLmem<==kWrite.getOutput("outA");

		KernelBlock kRead = addKernel(new KernelLMem_Read_CommandAndDataStream(makeKernelParameters(KERNEL_NAME_read)));
		DFELink fromLmem = addStreamFromOnCardMemory("fromLmem", kRead.getOutput("OcmdStreamRead"));

		kRead.getInput("inputFromLMEM")<==fromLmem;
		toCpu <== kRead.getOutput("outputFromLMEM");

		// CrcIndexTable
		StateMachineBlock crcIndex = addStateMachine("CrcIndexTable", new CRCIndexTable(this));
		crcIndex.getInput("crcResultInput") <== parallelCRC.getOutput(ParallelCRC.crcOut);
		crcIndex.getInput("crcBlankPageInput") <== crcIndex.getOutput("crcBlankPageOutput");

		StateMachineBlock smOutputFIFOsingle = addStateMachine("smOutputFIFOsingle", new CRCIndexFIFO(this));
		smOutputFIFOsingle.getInput("outputCrcFIFOInput0") <==	crcIndex.getOutput("crcIndexOutput");

		// command are sent from the state machine via wire SM into the LMEM
		StateMachineBlock smLMEM = addStateMachine("LMEM", new LMEM(this, ctrlGroup.getStreamIndexIdWithinGroup("readMemStream")));
		wire.getInput(SimpleWire.INPUT) <== smLMEM.getOutput(LMEM.OUTPUT_MEM_COMMAND);
		smLMEM.getInput(LMEM.INPUT_MEM_DATA) <== readMemStream;
		smLMEM.getInput("dataFromCrcIndex") <== smOutputFIFOsingle.getOutput("outputCrcFIFOOutput0"); 

		//socket disconnect
		KernelBlock TcpTxCpuKernel = addKernel(new TcpTxCpu(makeKernelParameters("TcpTxCpuKernel"), tcpStreamTypes));
		TcpTxCpuKernel.getInput(TcpTxCpu.INPUT_TX_DATA) <==	smLMEM.getOutput("outputLmemData");//
		tcpStream.getTransmitStream() <== TcpTxCpuKernel.getOutput(TcpTxCpu.OUTPUT_TX_DATA);

		
	   	DFELink toCpuByteNumber = addStreamToCPU("toCpuFileSizeBytes");
			
		toCpuByteNumber <== smLMEM.getOutput("fromLMEMFileSizeBytes");

		// SocketNumber (LMEM) --> CPU
			
	    DFELink toCpuSocketNumber = addStreamToCPU("toCpuSocketNumber");
	    toCpuSocketNumber <== smLMEM.getOutput("fromLMEMSocketNumber");

		// socketNumber: stateMachine -> LMEM
		StateMachineBlock smSocketOutputFIFO = addStateMachine("smSocketOutputFIFO", new SocketFIFO(this));
		
		smSocketOutputFIFO.getInput("socketNumberInput0") <== stateMachine.getOutput("socketNumberOutput");  

		smLMEM.getInput("LMEMsocketNumberInput") <== smSocketOutputFIFO.getOutput("socketNumberOutput0");
	}

	public static void main(String[] args) {
		
		EngineParameters params = new EngineParameters(args); 
		HttpServerManager m = new HttpServerManager(params);

		BuildConfig bConfig = m.getBuildConfig();
		bConfig.setMPPRCostTableSearchRange(1, 2);
		bConfig.setMPPRParallelism(10);

		m.build();
	}
}
