package httpServer;

import java.math.BigInteger;

import com.maxeler.maxcompiler.v2.managers.DFEManager;
import com.maxeler.maxcompiler.v2.statemachine.DFEsmAssignableValue;
import com.maxeler.maxcompiler.v2.statemachine.DFEsmMemAddress;
import com.maxeler.maxcompiler.v2.statemachine.DFEsmStateEnum;
import com.maxeler.maxcompiler.v2.statemachine.DFEsmStateValue;
import com.maxeler.maxcompiler.v2.statemachine.DFEsmValue;
import com.maxeler.maxcompiler.v2.statemachine.manager.DFEsmPushInput;
import com.maxeler.maxcompiler.v2.statemachine.manager.DFEsmPushOutput;
import com.maxeler.maxcompiler.v2.statemachine.manager.ManagerStateMachine;
import com.maxeler.maxcompiler.v2.statemachine.stdlib._State;


public class HTTPRequestParser extends ManagerStateMachine {

	enum States {
		START, URI, HTTP_VERSION, HEADERS, CR, LF, BLANK_LINE, END_GETREQUEST
	}

	private final DFEsmStateValue counter = _State.value(state, dfeUInt(20), 0, "counter");
	private final DFEsmStateValue sDataPrevious = _State.value(state, dfeUInt(64), 0, "sDataPrevious");
	private final DFEsmStateValue sDataValid = _State.value(state, dfeBool(), 0, "sDataValid");
	private final DFEsmStateValue sPrev2Bytes = _State.value(state, dfeUInt(16), 0, "sPrev2Bytes");
	private final DFEsmStateValue sPrev2BytesArray[] = new DFEsmStateValue[8];
	private final DFEsmStateValue sOutputStall = _State.value(state, dfeBool(), false, "sOutputStall");
	private final DFEsmStateValue sStoreURLValid = _State.value(state, dfeBool(),false, "sStoreURLValid");
	private final DFEsmStateValue sStoreURL = _State.value(state, dfeUInt(512), 0, "sStoreURL");
	private final DFEsmStateValue sBitNumber = _State.value(state, dfeUInt(9), 0, "sBitNumber");
	private final DFEsmStateEnum<States> sCurrentState;

	private final DFEsmPushInput inputTcpData = io.pushInput("tcp_to_sm", dfeUInt(75), 1);

	private final DFEsmPushOutput url = io.pushOutput("url", dfeUInt(512), 4);
	private final DFEsmPushOutput socketNumberOutput = io.pushOutput("socketNumberOutput", dfeUInt(8), 1);


	private final DFEsmValue byte1;
	private final DFEsmValue byte2;
	private final DFEsmValue byte3;
	private final DFEsmValue byte4;
	private final DFEsmValue byte5;
	private final DFEsmValue byte6;
	private final DFEsmValue byte7;
	private final DFEsmValue byte8;

	private final DFEsmStateValue sInputValid = state.value(dfeBool(), false);

	DFEsmMemAddress addressRom;

	private final DFEsmValue dataBytes[];

	private final DFEsmValue data;
	private final DFEsmValue mod;
	private final DFEsmValue eof;
	private final DFEsmValue sof;
	private final DFEsmValue socket;

	public HTTPRequestParser(DFEManager owner) {
		super(owner);

		data = inputTcpData.slice(0, 64).cast(dfeUInt(64));
		socket = inputTcpData.slice(64, 6).cast(dfeUInt(6));
		mod = inputTcpData.slice(70, 3).cast(dfeUInt(3));
		eof = inputTcpData.slice(73, 1).cast(dfeUInt(1));
		sof = inputTcpData.slice(74, 1).cast(dfeUInt(1));


		sCurrentState = _State.enumerated(state, States.class, States.START, "sCurrentState");

		for (int i = 0; i < sPrev2BytesArray.length; i++) {

			sPrev2BytesArray[i] = _State.value(state, dfeUInt(8), 0, "sPrev2BytesArray"+i);
		}

		dataBytes = new DFEsmValue[8];

		dataBytes[0] = data.slice(0, 8).cast(dfeUInt(8));
		dataBytes[1] = data.slice(8, 8).cast(dfeUInt(8));
		dataBytes[2] = data.slice(16, 8).cast(dfeUInt(8));
		dataBytes[3] = data.slice(24, 8).cast(dfeUInt(8));
		dataBytes[4] = data.slice(32, 8).cast(dfeUInt(8));
		dataBytes[5] = data.slice(40, 8).cast(dfeUInt(8));
		dataBytes[6] = data.slice(48, 8).cast(dfeUInt(8));
		dataBytes[7] = data.slice(56, 8).cast(dfeUInt(8));

		byte1 = data.slice(0, 8).cast(dfeUInt(8));
		byte2 = data.slice(8, 8).cast(dfeUInt(8));
		byte3 = data.slice(16, 8).cast(dfeUInt(8));
		byte4 = data.slice(24, 8).cast(dfeUInt(8));
		byte5 = data.slice(32, 8).cast(dfeUInt(8));
		byte6 = data.slice(40, 8).cast(dfeUInt(8));
		byte7 = data.slice(48, 8).cast(dfeUInt(8));
		byte8 = data.slice(56, 8).cast(dfeUInt(8));
	}

	@Override
	protected void nextState() {

		counter.next<==counter+1;

		IF(inputTcpData.valid)
		{
			debug.simPrintf("HTTPRequestParser: tick=%u, data: %x, mod: %x, eof: %x, sof: %x, socket: %u, input.valid=%x, output.stall=%x, input.stall=%x\n", counter,data, mod, eof,sof,socket,inputTcpData.valid,888, inputTcpData.stall); //output.stall
			debug.simPrintf("HTTPRequestParser: tick=%u, input: %x\n", counter,inputTcpData);
			debug.simPrintf("HTTPRequestParser: tick-%u, sCounter=%u, SNumericCurrent=%u, byte1=%x\n", counter,counter,sCurrentState,byte1);


		}


		IF(sStoreURLValid===true)
		{
			sStoreURLValid.next <== false;
		}


		IF(constant.value(true))
		{

			int width=32;

			DFEsmValue methodGET = constant.value(dfeUInt(width),new BigInteger(1,"GET ".getBytes()));

			IF(inputTcpData.valid)
			{
				sInputValid.next <== inputTcpData.valid;
				counter.next <== counter + 1;
				sDataPrevious.next <== data;
				sDataValid.next <== inputTcpData.valid;
				sPrev2Bytes.next <== byte8 # byte7;

				for(int i=0;i<sPrev2BytesArray.length;i++)
				{
					sPrev2BytesArray[i].next<==dataBytes[i];
				}

				SWITCH(sCurrentState)
				{
					CASE(States.START)
					{
						DFEsmValue n4bytes = byte1 # byte2 # byte3 # byte4;
						DFEsmAssignableValue sum = assignable.value(dfeUInt(4));
						sum <== 0;

						IF (n4bytes === methodGET) {

							IF(byte4===' ')
							{
								DFEsmAssignableValue startIndex=assignable.value(dfeUInt(3));
								startIndex<==7;
								DFEsmAssignableValue endIndex=assignable.value(dfeUInt(3));
								endIndex<==0;

								for(int i=0;i<8;i++)
								{
									IF(dataBytes[i]===' ')
									{
										IF(i<startIndex)
										{
											startIndex<==i;
										}

										IF((i>endIndex))
										{
											endIndex<==i;
										}

										sum<==sum+1;
									}
								}

								IF(sum>=2)
								{
									startIndex<==startIndex+1;
									endIndex<==endIndex-1;



								}
								ELSE
								{

									startIndex<==startIndex+1;
									endIndex<==7;
								}



								DFEsmAssignableValue bytes[]=new DFEsmAssignableValue[8];
								for(int u=0;u<8;u++)
								{
									bytes[u]=assignable.value(dfeUInt(8));
									bytes[u]<==dataBytes[u];
									IF(dataBytes[u]===' ')
									{
										bytes[u]<==0;
									}
								}

								for(int t=0;t<8;t++)
								{

								}



								DFEsmAssignableValue startIndexBit = assignable.value(dfeUInt(8));
								DFEsmAssignableValue endIndexBit = assignable.value(dfeUInt(8));
								startIndexBit <== startIndex.cast(dfeUInt(8))*8;
								endIndexBit <== endIndex.cast(dfeUInt(8))*8+7;

								DFEsmAssignableValue bitNumber = assignable.value(dfeUInt(9));
								bitNumber <==0;

								int bitPointer = 0;

								for(int i=0;i<8;i++)
								{
									IF((i>=startIndex) & (i<=endIndex))
									{
											for(int j=0;j<8;j++)
											{
												SWITCH(bitNumber)
												{
													CASE(0) {
														sStoreURL.next[0+j] <== bytes[i].slice(j, 1);
													}

													CASE(8) {
														sStoreURL.next[8+j] <== bytes[i].slice(j, 1);
													}

													CASE(16) {
														sStoreURL.next[16+j] <== bytes[i].slice(j, 1);
													}

													CASE(24) {
														sStoreURL.next[24+j] <== bytes[i].slice(j, 1);
													}

													CASE(32) {
														sStoreURL.next[32+j] <== bytes[i].slice(j, 1);
													}

													CASE(40) {
														sStoreURL.next[40+j] <== bytes[i].slice(j, 1);
													}

													CASE(48) {
														sStoreURL.next[48+j] <== bytes[i].slice(j, 1);
													}

													CASE(56) {
														sStoreURL.next[56+j] <== bytes[i].slice(j, 1);
													}
												}
											}
										bitNumber <== bitNumber + 8;
									}

									bitPointer=bitPointer+8;


								}


								sBitNumber.next <== bitNumber;

							}

							IF(sum>=2)
							{

								sCurrentState.next<==States.HTTP_VERSION;
								debug.simPrintf("HTTPRequestParser: nextState: HTTP_VERSION: tick=%u, sNumericCurrent=%u, data=%x\n", counter,sCurrentState,data);
								// debug.dfePrintf("HTTPRequestParser: nextState: HTTP_VERSION: tick=%u, sNumericCurrent=%u, data=%x\n", counter,sCurrentState,data);

							}
							ELSE {
								sCurrentState.next<==States.URI;
								debug.simPrintf("HTTPRequestParser: nextState: URI: tick=%u, sNumericCurrent=%u, data=%x\n", counter,sCurrentState,data);
							}
						}
					}
					CASE(States.URI)
					{
						DFEsmAssignableValue sumStateURI = assignable.value(dfeUInt(4));
						sumStateURI <== 0;
						DFEsmAssignableValue startIndex=assignable.value(dfeUInt(3));
						startIndex<==0;
						DFEsmAssignableValue endIndex=assignable.value(dfeUInt(3));
						endIndex<==0;



						for(int i=0;i<8;i++)
						{
							IF(dataBytes[i]===' ')
							{
								IF((i>endIndex))
								{
									endIndex<==i;
								}

								sumStateURI<==sumStateURI+1;
							}
						}

						IF(sumStateURI>=2)
						{
							startIndex<==startIndex+1;
							endIndex<==endIndex-1;


						}
						ELSE IF(sumStateURI===1)
						{
							IF(endIndex!==0) endIndex<==endIndex-1;
						}
						ELSE IF(sumStateURI===0)
						{
							startIndex<==0;
							endIndex<==7;
						}

						DFEsmAssignableValue bytes[]=new DFEsmAssignableValue[8];
						for(int u=0;u<8;u++)
						{
							bytes[u]=assignable.value(dfeUInt(8));
							bytes[u]<==dataBytes[u];
							IF(dataBytes[u]===' ')
							{
								bytes[u]<==0;
							}
						}



						DFEsmAssignableValue bitNumber = assignable.value(dfeUInt(9));
						bitNumber <==sBitNumber;

						int bitPointer = 0;

						for(int i=0;i<8;i++)
						{
							IF((i>=startIndex) & (i<=endIndex))
							{
								for(int t=0;t<504;t++)
								{
									IF(bitNumber===t)
									{
										for(int j=0;j<8;j++)
										{
											sStoreURL.next[t+j] <== bytes[i].slice(j, 1);
										}
									}
								}

								bitNumber <== bitNumber + 8;
							}

							bitPointer=bitPointer+8;


						}

						debug.simPrintf("HTTPRequestParser: URL: startIndex=%u, endIndex=%u, bitNumber=%u, sStoreURL=%x\n", startIndex, endIndex, bitNumber, sStoreURL);

						sBitNumber.next<==bitNumber;

						IF (byte1===' ' | byte2===' ' | byte3===' ' | byte4===' ' | byte5===' ' | byte6===' ' | byte7===' ' | byte8===' ')
						{

							sCurrentState.next<==States.HTTP_VERSION;

							sStoreURLValid.next<==true;

							debug.simPrintf("HTTPRequestParser: nextState: HttpVersion: tick=%u, sNumericCurrent=%u, data=%x\n", counter,sCurrentState,data);
						}
						ELSE{
								sCurrentState.next<==States.URI;
						}
					}
					CASE(States.HTTP_VERSION)
					{
						debug.simPrintf("HTTPRequestParser: httpState: sBitNumber=%u, sStoreURL=%x\n", sBitNumber, sStoreURL);


						debug.simPrintf("HTTPRequestParser: in HTTP state: byte1=%x, byte2=%x, sPrev2Bytes=%x\n",byte1,byte2,sPrev2Bytes);
						IF(inputTcpData.valid)
						{

							IF (byte1===13 & byte2===10)
								IF (sPrev2Bytes === (byte2 # byte1))
								{
									sCurrentState.next<==States.END_GETREQUEST;
									debug.simPrintf("HTTPRequestParser: nextState 1: krajGETrequesta: tick=%u, sNumericCurrent=%u, data=%x\n", counter,sCurrentState,data);
								}


							IF (byte1===13 & byte2===10)
								IF ((sPrev2BytesArray[1] # sPrev2BytesArray[0]) === (byte2 # byte1))
								{
									sCurrentState.next<==States.END_GETREQUEST;
									debug.simPrintf("HTTPRequestParser: nextState 7: krajGETrequesta: tick=%u, sNumericCurrent=%u, data=%x\n", counter,sCurrentState,data);
								}


							IF ((sPrev2BytesArray[5]===13) & (sPrev2BytesArray[6] === 10))
								IF ((sPrev2BytesArray[7] === 13) & (byte1===10))
								{
									sCurrentState.next<==States.END_GETREQUEST;
									debug.simPrintf("HTTPRequestParser: nextState 8: krajGETrequesta: tick=%u, sNumericCurrent=%u, data=%x\n", counter,sCurrentState,data);
								}


							IF ((sPrev2BytesArray[7]===13) & (byte1 === 10))
								IF ((byte2 === 13) & (byte3===10))
								{
									sCurrentState.next<==States.END_GETREQUEST;
									debug.simPrintf("HTTPRequestParser: nextState 9: krajGETrequesta: tick=%u, sNumericCurrent=%u, data=%x\n", counter,sCurrentState,data);
								}


							IF (byte1===13 & byte2===10)
								IF ((byte1 # byte2) === (byte3 # byte4))
								{
									sCurrentState.next<==States.END_GETREQUEST;
									debug.simPrintf("nextState 2: krajGETrequesta: tick=%u, sNumericCurrent=%u, data=%x\n", counter,sCurrentState,data);
								}

							IF (byte2===13 & byte3===10)
								IF ((byte2 # byte3) === (byte4 # byte5))
								{
									sCurrentState.next<==States.END_GETREQUEST;
									debug.simPrintf("HTTPRequestParser: nextState 3: krajGETrequesta: tick=%u, sNumericCurrent=%u, data=%x\n", counter,sCurrentState,data);
								}

							IF (byte3===13 & byte4===10)
								IF ((byte3 # byte4) === (byte5 # byte6))
								{
									sCurrentState.next<==States.END_GETREQUEST;
									debug.simPrintf("HTTPRequestParser: nextState 4: krajGETrequesta: tick=%u, sNumericCurrent=%u, data=%x\n", counter,sCurrentState,data);
								}

							IF (byte4===13 & byte5===10)
								IF ((byte4 # byte5) === (byte6 # byte7))
								{
									sCurrentState.next<==States.END_GETREQUEST;
									debug.simPrintf("HTTPRequestParser: nextState 5: krajGETrequesta: tick=%u, sNumericCurrent=%u, data=%x\n", counter,sCurrentState,data);
								}

							IF (byte5===13 & byte6===10)
								IF ((byte5 # byte6) === (byte7 # byte8))
								{
									sCurrentState.next<==States.END_GETREQUEST;
									debug.simPrintf("HTTPRequestParser: nextState 6: krajGETrequesta: tick=%u, sNumericCurrent=%u, data=%x\n", counter,sCurrentState,data);
								}
						}
					}
					CASE(States.LF)
					{
						{
							for(int i=0;i<7;i++)
							{
								IF(dataBytes[i]===13 & dataBytes[i+1]===10)
								{

								}
							}

							sCurrentState.next<==States.BLANK_LINE;
						}
					}


					CASE(States.END_GETREQUEST)
					{

						{
							sCurrentState.next<==States.START;
							sPrev2Bytes.next <==0;
						}
						debug.simPrintf("HTTPRequestParser: END_GETREQUEST: tick=%u, sNumericCurrent=%u, data=%x\n", counter,sCurrentState,data);
					}
				} //end switch
			}

			SWITCH (sCurrentState) {
				CASE (States.START) {
					//debug.simPrintf("START: tick=%u, sNumericCurrent=%u, data=%x\n", counter,sCurrentState,data);
				}

				CASE (States.URI) {
				}

				CASE (States.HTTP_VERSION) {

				}

				CASE (States.CR) {

				}

				CASE (States.LF) {

				}

				CASE (States.BLANK_LINE) {

				}

				CASE (States.END_GETREQUEST) {
					sCurrentState.next<==States.START;
					sStoreURL.next <== 0;
					debug.simPrintf("END_GETREQUEST: tick=%u, sNumericCurrent=%u, data=%x\n", counter,sCurrentState,data);
				}

				OTHERWISE {
				}
			}
		}
	}

	@Override
	protected void outputFunction() {

		url.valid<==false;
		url <== 0;

		socketNumberOutput.valid <== false;
		socketNumberOutput <== 0;



		IF(sStoreURLValid)
		{

			url.valid<== true;
			url <== sStoreURL.cast(dfeUInt(512));


			debug.simPrintf("HTTPRequestParser: sStoreURL=%x, sStoreURLValid=%u\n", sStoreURL, sStoreURLValid);

			socketNumberOutput.valid <== true;
			socketNumberOutput <== socket.cast(dfeUInt(8));
			debug.simPrintf("HTTPRequestParser: socketNumberOutput=%u\n", socketNumberOutput);

		}


		IF (sCurrentState===States.END_GETREQUEST) {

			debug.simPrintf("HTTPRequestParser: END_GETREQUEST: tick=%u, sNumericCurrent=%u, data=%x\n", counter,sCurrentState,data);
		}


		inputTcpData.stall <== url.stall;



	}
}
