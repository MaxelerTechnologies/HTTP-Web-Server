package httpServer;

import com.maxeler.maxcompiler.v2.kernelcompiler.Kernel;
import com.maxeler.maxcompiler.v2.kernelcompiler.KernelParameters;
import com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.Count.WrapMode;
import com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.IO.DelimiterMode;
import com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.IO.NonBlockingInput;
import com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.IO.NonBlockingMode;
import com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFETypeFactory;
import com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar;
import com.maxeler.maxcompiler.v2.kernelcompiler.types.composite.DFEStruct;
import com.maxeler.maxcompiler.v2.kernelcompiler.types.composite.DFEStructType;
import com.maxeler.networking.statemachines.Flushing;
import com.maxeler.networking.types.TCPManyConnectionsTypes;
import com.maxeler.networking.types.TCPManyConnectionsTypes.TxDataType;

public class TcpTxCpu extends Kernel {
	public static String INPUT_TX_DATA = "inputTxData";
	public static String OUTPUT_TX_DATA = "outputTxData";

	public static String OUTPUT_TX_EVENTS = "outputTxEvent";



	public static final OutboundType outboundType = new OutboundType();
	public static class OutboundType extends DFEStructType {
		public static final String SOCKET = "socket";
		public static final String MOD = "mod";
		public static final String DATA = "data";
		public static final String SOF = "sof";
		public static final String EOF = "eof";
		public static final String PADDING = "padding";

		public OutboundType() {
			super(
					sft(DATA, DFETypeFactory.dfeRawBits(64)),
					sft(SOCKET, DFETypeFactory.dfeUInt(16)),
					sft(MOD, DFETypeFactory.dfeUInt(3)),
					sft(EOF, DFETypeFactory.dfeBool()),
					sft(SOF, DFETypeFactory.dfeBool()),
					sft(PADDING, DFETypeFactory.dfeRawBits(128 - 64 - 16 - 3 - 1 - 1))
			);
		}
	}

	public static final TxEventType txEventType = new TxEventType();
	public static class TxEventType extends DFEStructType {
		public static final String SOCKET_ID = "socketID";
		public static final String TX_FRAME_COUNT = "txFrameCount";
		public static final String RESERVED = "reserved";

		public TxEventType() {
			super(
					sft(SOCKET_ID, dfeUInt(16)),
					sft(TX_FRAME_COUNT, dfeUInt(64)),
					sft(RESERVED, dfeUInt(48))
				);
		}
	}

	public TcpTxCpu(KernelParameters parameters, TCPManyConnectionsTypes tcpTypes) {
		super(parameters);

		

		flush.disabled();

		DFEStructType tcpStructType = tcpTypes.getTxDataType();

		NonBlockingInput<DFEStruct> txInput = io.nonBlockingInput(
				INPUT_TX_DATA,
				tcpStructType,
				constant.var(true),
				tcpStructType.getPositionForField(tcpTypes.getTxDataType().getEOF()),
				DelimiterMode.EOF_POSITION,
				Flushing.interFrameGapNone,
				NonBlockingMode.NO_TRICKLING);

		DFEVar txValid = txInput.valid;

		DFEStruct data = txInput.data;
		DFEVar sof = data[TxDataType.SOF];
		DFEVar eof = data[TxDataType.EOF];
		DFEVar mod = data[TxDataType.MOD];
		DFEVar content = data[TxDataType.DATA];
		DFEVar socket = data[TxDataType.SOCKET];



		DFEStruct outputStruct = tcpStructType.newInstance(this);
		outputStruct[TxDataType.SOF] <== sof;
		outputStruct[TxDataType.EOF] <== eof;
		outputStruct[TxDataType.MOD] <== mod;
		outputStruct[TxDataType.DATA] <== content;
		outputStruct[TxDataType.SOCKET] <== socket.cast(outputStruct[TxDataType.SOCKET].getType());



		DFEVar frameCount = control.count.makeCounter(
				control.count.makeParams(64)
					.withEnable(txValid)
					.withInitValue(0)
					.withWrapMode(WrapMode.STOP_AT_MAX)
				).getCount();

		
		debug.simPrintf(txValid, "TxManagerKernelV1: data=%x, sof=%u, eof=%u, mod=%u, socket=%u, txValid=%u, frameCount=%u\n", outputStruct[TxDataType.DATA], outputStruct[TxDataType.SOF], outputStruct[TxDataType.EOF], outputStruct[TxDataType.MOD], outputStruct[TxDataType.SOCKET], txValid, frameCount);
			
		io.output(OUTPUT_TX_DATA, tcpStructType,txValid) <== outputStruct;


	}
}
