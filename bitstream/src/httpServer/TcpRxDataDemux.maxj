package httpServer;

import com.maxeler.maxcompiler.v2.kernelcompiler.KernelParameters;
import com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.Count.WrapMode;
import com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.IO.DelimiterMode;
import com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.IO.NonBlockingInput;
import com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.IO.NonBlockingMode;
import com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar;
import com.maxeler.maxcompiler.v2.kernelcompiler.types.composite.DFEStruct;
import com.maxeler.maxcompiler.v2.kernelcompiler.types.composite.DFEStructType;
import com.maxeler.networking.types.TCPManyConnectionsTypes;
import com.maxeler.networking.types.TCPManyConnectionsTypes.RxDataRespType;
import com.maxeler.networking.v1.framed_kernels.ByteOrder;
import com.maxeler.networking.v1.framed_kernels.FrameData;
import com.maxeler.networking.v1.framed_kernels.FrameFormat;
import com.maxeler.networking.v1.framed_kernels.FramedLinkType;
import com.maxeler.networking.v1.framed_kernels.ThroughputFramedKernel;

public class TcpRxDataDemux extends ThroughputFramedKernel {
	public static final String INPUT_TCP = "INPUT_TCP";
	public static final String[] OUTPUT_TCP = new String[httpServerManager.getNsockets()];

	public static final int WORD_SIZE_BYTES = 8;


	public static final OutputLinkType outputLinkType = new OutputLinkType();
	public static class OutputLinkType extends DFEStructType implements FramedLinkType {
		public OutputLinkType() {
			super(
					sft("data", dfeRawBits(64)),
					sft("sof", dfeBool()),
					sft("eof", dfeBool()),
					sft("mod", dfeUInt(3))
			);
		}
		@Override public String getEOF() { return "eof"; }
		@Override public String getSOF() { return "sof"; }
		@Override public String getData() {	return "data"; }
		@Override public String getMod() { return "mod";	}
		@Override public DFEStructType getDFEStructType() {	return this; }
	}

	private static class OutputFormat extends FrameFormat {
		public OutputFormat() {
			super(ByteOrder.LITTLE_ENDIAN);

			addField("a", dfeRawBits(64));
			//addField("b", dfeRawBits(8));
			//addField("c", dfeRawBits(8));
		}
	}

	TcpRxDataDemux(KernelParameters parameters, TCPManyConnectionsTypes tcpTypes) {
		super(parameters);

		//TCPType tcpType = new TCPType();
		//DFEStructType inputType = tcpType.getDFEStructType();

		DFEStructType rxDataRespType = tcpTypes.getRxDataRespType();

//		setMinimumInterFrameGap(3);

		NonBlockingInput<DFEStruct> theInput = io.nonBlockingInput(
				INPUT_TCP,
				rxDataRespType,
				constant.var(true),
				rxDataRespType.getPositionForField(RxDataRespType.EOF), //inputType.getPositionForField(tcpType.getEOF()),
				DelimiterMode.FRAME_LENGTH, //DelimiterMode.EOF_POSITION,
//				Flushing.interFrameGapNone,
				3,
				NonBlockingMode.NO_TRICKLING);

		//final ArrayList<NonBlockingInput<DFEStruct>> outputPorts1 = new ArrayList<NonBlockingInput<DFEStruct>>(Nsocket);

		DFEStruct inputStruct = theInput.data; //'data' contains TCP fields: data, socket, sof, eof, mod
		DFEVar valid = theInput.valid;

		DFEVar data = inputStruct[RxDataRespType.DATA]; //get(tcpTypes.getRxDataRespType().DATA)//tcpType.getData()
			//DFEVar som = (DFEVar)inputStruct.get(tcpType.getSOF()) & valid;
		DFEVar som = valid;
//		DFEVar eom = (DFEVar)inputStruct.get(udpType.getEOF()) & valid;


		DFEVar frameCount = control.count.makeCounter(
				control.count.makeParams(64)
					.withEnable(valid)
					.withInitValue(0)
					.withWrapMode(WrapMode.STOP_AT_MAX)
				).getCount();



		OutputFormat outputFormat = new OutputFormat();

		DFEVar txSocket = inputStruct[RxDataRespType.SOCKET];

		debug.simPrintf(valid===1, "TcpRxDataDemux: data=%x, socket=%u, valid=%u, frameCount=%u\n", data, txSocket, valid, frameCount);



		DFEVar[] validOutput = new DFEVar[OUTPUT_TCP.length];

		for(int i=0;i < OUTPUT_TCP.length;i++)
		{
			validOutput[i] = constant.var(false);
		}



		for(int i=0;i < OUTPUT_TCP.length;i++)
		{
			validOutput[i]= (txSocket === constant.var(txSocket.getType(),i));
		}



		for(int i=0;i < OUTPUT_TCP.length;i++)
		{
			String outputName = "OUTPUT_TCP" + String.valueOf(i);
			System.out.println("outputName: " + outputName);


			FrameData<OutputFormat> frameOut = new FrameData<OutputFormat>(
					this,
					outputFormat,
					tcpTypes.getTxDataType()  //outputLinkType
			);

			DFEVar fieldA = data;
			frameOut["a"] <== fieldA;
			frameOut.linkfield[RxDataRespType.SOCKET] <== txSocket;

			io.frameOutput(outputName, frameOut, constant.var(true), som & validOutput[i]);
			debug.simPrintf(som & (validOutput[i]===1), "TcpRxDataDemux: data=%x, socket=%u, validOutput[%d]=%u\n", data, txSocket, i, validOutput[i]);
		}


	}
	}


