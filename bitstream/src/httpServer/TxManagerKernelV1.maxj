package httpServer;

import com.maxeler.maxcompiler.v2.kernelcompiler.Kernel;
import com.maxeler.maxcompiler.v2.kernelcompiler.KernelParameters;
import com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.Reductions;
import com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.Count.WrapMode;
import com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.IO.DelimiterMode;
import com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.IO.NonBlockingInput;
import com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.IO.NonBlockingMode;
import com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar;
import com.maxeler.maxcompiler.v2.kernelcompiler.types.composite.DFEStruct;
import com.maxeler.maxcompiler.v2.kernelcompiler.types.composite.DFEStructType;
import com.maxeler.networking.statemachines.Flushing;
import com.maxeler.networking.v1.kernel_types.TCPType;

public class TxManagerKernelV1 extends Kernel {
	public static String INPUT_TX_DATA = "inputTxData";
	public static String OUTPUT_TX_DATA = "outputTxData";

	public static String OUTPUT_TX_EVENTS = "outputTxEvent";

	private final DFEStructType tcpStructType;

	public static final TxEventType txEventType = new TxEventType();
	public static class TxEventType extends DFEStructType {
		public static final String SOCKET_ID = "socketID";
		public static final String TX_FRAME_COUNT = "txFrameCount";
		public static final String RESERVED = "reserved";

		public TxEventType() {
			super(
					sft(SOCKET_ID, dfeUInt(16)),
					sft(TX_FRAME_COUNT, dfeUInt(64)),
					sft(RESERVED, dfeUInt(48))
				);
		}
	}


	public TxManagerKernelV1(KernelParameters parameters, TCPType tcpType) {
		super(parameters);
		tcpStructType = tcpType.getDFEStructType();
		flush.disabled();


		NonBlockingInput<DFEStruct> txInput = io.nonBlockingInput(INPUT_TX_DATA,
				tcpStructType, constant.var(true),
				tcpStructType.getPositionForField(tcpType.getEOF()), DelimiterMode.EOF_POSITION,
				Flushing.interFrameGapNone, NonBlockingMode.NO_TRICKLING);

		DFEVar txValid = txInput.valid;
		DFEStruct txData = txInput.data;
		DFEVar txDataSof = txData[tcpType.getSOF()];
		DFEVar txIsStart = txValid & txDataSof;
		DFEVar txSocket = Reductions.streamHold((DFEVar)txData[TCPType.SOCKET], txIsStart);

		io.output(OUTPUT_TX_DATA, tcpStructType, txValid) <== txData;

		DFEVar frameCount = control.count.makeCounter(
				control.count.makeParams(64)
					.withEnable(txIsStart)
					.withInitValue(0)
					.withWrapMode(WrapMode.STOP_AT_MAX)
				).getCount();

		io.scalarOutput("frameCount", dfeUInt(64)) <== frameCount;

		DFEStruct txEvent = txEventType.newInstance(this);
		txEvent[TxEventType.SOCKET_ID] <== txSocket.cast(txEvent[TxEventType.SOCKET_ID].getType());
		txEvent[TxEventType.TX_FRAME_COUNT] <== frameCount;
		txEvent[TxEventType.RESERVED] <== constant.var(((DFEVar)txEvent[TxEventType.RESERVED]).getType(), 0);

		//debug.printf("KERNEL frameCount=%u\n",frameCount);

		io.output(OUTPUT_TX_EVENTS, txEventType, txIsStart) <== txEvent;
	}
}
