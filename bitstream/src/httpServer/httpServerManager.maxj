package httpServer;

import com.maxeler.maxcompiler.v2.managers.BuildConfig;
import com.maxeler.maxcompiler.v2.managers.custom.DFELink;
import com.maxeler.maxcompiler.v2.managers.custom.blocks.Demux;
import com.maxeler.maxcompiler.v2.managers.custom.blocks.KernelBlock;
import com.maxeler.maxcompiler.v2.managers.custom.blocks.StateMachineBlock;
import com.maxeler.maxcompiler.v2.managers.custom.stdlib.DebugLevel;
import com.maxeler.maxcompiler.v2.managers.custom.stdlib.MemoryControlGroup;
import com.maxeler.networking.v1.kernel_types.TCPType;
import com.maxeler.networking.v1.managers.NetworkManager;
import com.maxeler.networking.v1.managers.netlib.Max4NetworkConnection;
import com.maxeler.networking.v1.managers.netlib.TCPStream;

public class httpServerManager extends NetworkManager {

	private static final String KERNEL_NAME_write = "KernelLMem_Write_CommandAndDataStream";
	private static final String KERNEL_NAME_read = "KernelLMem_Read_CommandAndDataStream";

	public httpServerManager(HttpServerEngineParameters params) {
		super(params.getEngineParams());

		debug.setDebugLevel(new DebugLevel(){{setHasStreamStatus(true);}});

		// version for ISCA card, MAX4 card generation
		TCPStream tcp_stream = addTCPStream(
				"tcp_ISCA_QSFP_BOT_10G_PORT1",
				Max4NetworkConnection.QSFP_BOT_10G_PORT1);

		StateMachineBlock wire = addStateMachine("cmdWire", new SimpleWire(this, 64));
		getManagerConfiguration().dram.setEnableFlagCommands(true);

		MemoryControlGroup ctrlGroup = addMemoryControlGroup("ctrlGroup", wire.getOutput(SimpleWire.OUTPUT));

		DFELink readMemStream = addStreamFromOnCardMemory("readMemStream", ctrlGroup);
	    ctrlGroup.finalise();

		StateMachineBlock stateMachine = addStateMachine("httpServerStateMachine", new httpServerStateMachine(this));
		stateMachine.getInput("tcp_to_sm") <== tcp_stream.getReceiveStream();

		KernelBlock kWrite = addKernel(new KernelLMem_Write_CommandAndDataStream(makeKernelParameters(KERNEL_NAME_write)));

		DFELink toCpu = addStreamToCPU("toCpu");
		DFELink fromCpu = addStreamFromCPU("fromCpu");

		DFELink toLmem = addStreamToOnCardMemory("toLmem",kWrite.getOutput("OcmdStream"));

		kWrite.getInput("inA")<==fromCpu;
		toLmem<==kWrite.getOutput("outA");

		KernelBlock kRead = addKernel(new KernelLMem_Read_CommandAndDataStream(makeKernelParameters(KERNEL_NAME_read)));
		DFELink fromLmem = addStreamFromOnCardMemory("fromLmem", kRead.getOutput("OcmdStream"));

		kRead.getInput("inA")<==fromLmem;
		toCpu <== kRead.getOutput("outA");

		// parallel CRC
		StateMachineBlock parallelCRC = addStateMachine("parallelCRC", new ParallelCRC(this));
			Demux splitStateMachine = demux("splitStateMachine");
			splitStateMachine.getInput() <== stateMachine.getOutput("checksumOutput");
		parallelCRC.getInput(ParallelCRC.dataIn) <== splitStateMachine.addOutput("splitStateMachine1"); //stateMachine.getOutput("checksumOutput");
			addStreamToCPU("toCpuByteNumberStateMachine") <== splitStateMachine.addOutput("splitStateMachine2");

		// crcIndex
		StateMachineBlock crcIndex = addStateMachine("crcIndex", new crcIndex(this));
		crcIndex.getInput("crcResultInput") <== parallelCRC.getOutput(ParallelCRC.crcOut);

		// command are sent from the state machine via wire SM into the LMEM
		StateMachineBlock LMEM1 = addStateMachine("LMEM", new LMEM(this, ctrlGroup.getStreamIndexIdWithinGroup("readMemStream")));
		wire.getInput(SimpleWire.INPUT) <== LMEM1.getOutput(LMEM.OUTPUT_MEM_COMMAND);
		LMEM1.getInput(LMEM.INPUT_MEM_DATA) <== readMemStream;
		LMEM1.getInput("dataFromCrcIndex") <== crcIndex.getOutput("crcIndexOutput");

		// socket disconnect
		KernelBlock TxManagerKernelV1kernel = addKernel(new TxManagerKernelV1(makeKernelParameters("TxManagerKernelV1_kernel"), new TCPType()));
		DFELink toCpuOutputTxEvent = addStreamToCPU("toCpuOutputTxEvent");
		toCpuOutputTxEvent <== TxManagerKernelV1kernel.getOutput(TxManagerKernelV1.OUTPUT_TX_EVENTS);

		TxManagerKernelV1kernel.getInput(TxManagerKernelV1.INPUT_TX_DATA) <==	LMEM1.getOutput("outputLmemData");//
		tcp_stream.getTransmitStream() <== TxManagerKernelV1kernel.getOutput(TxManagerKernelV1.OUTPUT_TX_DATA);

		// ByteNumber --> CPU
		StateMachineBlock wireByteNumber = addStateMachine("byteNumber", new SimpleWire(this, 64));
	    wireByteNumber.getInput(SimpleWire.INPUT) <== LMEM1.getOutput("fromStateMachineByteNumber");
	    DFELink toCpuByteNumber = addStreamToCPU("toCpuByteNumber");
		toCpuByteNumber <== wireByteNumber.getOutput(SimpleWire.OUTPUT);

		// socketNumber: stateMachine -> LMEM
		LMEM1.getInput("socketNumberInput") <== stateMachine.getOutput("socketNumberOutput");

	}

	public static void main(String[] args) {
		HttpServerEngineParameters params = new HttpServerEngineParameters(args);
		httpServerManager m = new httpServerManager(params);

		BuildConfig bConfig = m.getBuildConfig();
		bConfig.setMPPRCostTableSearchRange(1, 2);

		bConfig.setMPPRParallelism(10);

		m.build();
	}
}
